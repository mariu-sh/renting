version: "3.3"
services:

  flatconfig-service:
    env_file:
      - .env
    build:
      args:
        flatConfigPort: ${FLAT_CONFIG_PORT:-8081}
      context: .
      dockerfile: Dockerfile-flatconfig
    image: flatconfig-service-image
    expose:
      - ${FLAT_CONFIG_PORT:-8081}
    ports:
      - ${FLAT_CONFIG_PORT:-8081}:${FLAT_CONFIG_PORT:-8081}
    depends_on:
      - flatconfig-db
    networks:
      backend-network:
        ipv4_address: ${FLAT_CONFIG_IP}

  flatconfig-db:
    image: postgres
    restart: always
    command: -p ${FLAT_CONFIG_DB_PORT:-5431}
    expose:
      - ${FLAT_CONFIG_DB_PORT:-5431}
    ports:
      - ${FLAT_CONFIG_DB_PORT:-5431}:${FLAT_CONFIG_DB_PORT:-5431}
    environment:
      POSTGRES_USER: ${FLAT_CONFIG_DB_USERNAME:-pguser}
      POSTGRES_PASSWORD: ${FLAT_CONFIG_DB_PASSWORD:-pgpass}
      POSTGRES_DB: ${FLAT_CONFIG_DB_NAME:-pgdb}
    networks:
      backend-network:
        ipv4_address: ${FLAT_CONFIG_DB_IP}

  costservice-db:
    image: postgres
    restart: always
    command: -p ${COST_SERVICE_DB_PORT:-5432}
    ports:
      - ${COST_SERVICE_DB_PORT:-5432}:${COST_SERVICE_DB_PORT:-5432}
    environment:
      POSTGRES_USER: ${COST_SERVICE_DB_USERNAME:-pguser}
      POSTGRES_PASSWORD: ${COST_SERVICE_DB_PASSWORD:-pgpass}
      POSTGRES_DB: ${COST_SERVICE_DB_NAME:-pgdb}
    networks:
      backend-network:
        ipv4_address: ${COST_SERVICE_DB_IP}

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:5.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
    depends_on:
      - kafka-setup
      - broker

  kafka-setup:
    image: confluentinc/cp-kafka:5.1.1
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - broker
    volumes:
      - $PWD/connectors:/tmp/connectors
      - $PWD/dashboard:/tmp/dashboard
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                         cub kafka-ready -b broker:29092 1 20 && \
                         kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic flat-sync'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

networks:
  backend-network:
    ipam:
      config:
        - subnet: ${SUBNET}